networks:
  sansa-dev:
    driver: bridge

services:
  app:
    privileged: true
    platform: linux/arm64/v8
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64/v8

    # Add memory limits and shared memory to prevent bus errors
    mem_limit: 8g
    shm_size: 4g

    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock # Docker-in-Docker support
      # Keep node_modules separate from host to prevent architecture/version conflicts
      # Root node_modules for monorepo shared dependencies
      - pnpm_root_node_modules:/workspace/node_modules
      # Individual package node_modules for Sansa dual-backend architecture
      - pnpm_tb_nest_node_modules:/workspace/packages/tb-nest/node_modules
      - pnpm_tb_frontend_node_modules:/workspace/packages/tb-frontend/node_modules
      - pnpm_tb_shared_node_modules:/workspace/packages/tb-shared/node_modules
      - pnpm_s_nest_node_modules:/workspace/packages/s-nest/node_modules
      - pnpm_s_frontend_node_modules:/workspace/packages/s-frontend/node_modules
      - pnpm_s_shared_node_modules:/workspace/packages/s-shared/node_modules

    environment:
      # Increase Node.js memory limits
      - NODE_OPTIONS=--max_old_space_size=8192
      - DOCKER_HOST=unix:///var/run/docker.sock # Docker socket access
      - MINIO_ENDPOINT=http://minio:9000 # MinIO object storage (internal)
      - MINIO_EXTERNAL_ENDPOINT=http://localhost:9100 # MinIO object storage (external)
      - REGISTRY_ENDPOINT=http://registry:5000 # Container registry (internal)
      - REGISTRY_EXTERNAL_ENDPOINT=http://localhost:5100 # Container registry (external)
      # TB Backend Database Configuration
      - TB_POSTGRES_HOST=tb-db
      - TB_POSTGRES_PORT=5432
      - TB_POSTGRES_DATABASE=tb-sansa-dev
      - TB_POSTGRES_USERNAME=postgres
      - TB_POSTGRES_PASSWORD=dev-pw
      # S Backend Database Configuration
      - S_POSTGRES_HOST=s-db
      - S_POSTGRES_PORT=5432
      - S_POSTGRES_DATABASE=s-sansa-dev
      - S_POSTGRES_USERNAME=postgres
      - S_POSTGRES_PASSWORD=dev-pw
      # Redis configuration (shared across both backends)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # JWT configuration (shared)
      - JWT_SECRET=dev-key

    # Connect the app to the same network as databases and services
    networks:
      - sansa-dev

    # Expose ports for dual backend/frontend development
    ports:
      - '3000:3000' # S-Nest Backend API
      - '3001:3001' # TB-Nest Backend API
      - '4200:4200' # S-Frontend Dev Server
      - '4201:4201' # TB-Frontend Dev Server

    depends_on:
      - tb-db
      - s-db
      - redis
      - minio
      - registry

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  # TB Backend PostgreSQL Database
  tb-db:
    image: postgres:14.4
    platform: linux/arm64/v8
    environment:
      POSTGRES_DB: tb-sansa-dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev-pw
    networks:
      - sansa-dev
    volumes:
      - tb_postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  # S Backend PostgreSQL Database
  s-db:
    image: postgres:14.4
    platform: linux/arm64/v8
    environment:
      POSTGRES_DB: s-sansa-dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev-pw
    networks:
      - sansa-dev
    volumes:
      - s_postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'

  redis:
    image: redis:7.0.7
    platform: linux/arm64/v8
    networks:
      - sansa-dev
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'

  minio:
    image: minio/minio:latest
    platform: linux/arm64/v8
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - '9100:9000'
      - '9101:9001'
    volumes:
      - minio_data:/data
    networks:
      - sansa-dev

  registry:
    image: registry:2.8
    platform: linux/arm64/v8
    ports:
      - '5100:5000'
    volumes:
      - registry_data:/var/lib/registry
    networks:
      - sansa-dev

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    platform: linux/arm64/v8
    ports:
      - '8200:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - sansa-dev
    privileged: true

volumes:
  # PostgreSQL data volumes for dual-backend architecture
  tb_postgres_data:
  s_postgres_data:
  # Shared service data volumes
  redis_data:
  minio_data:
  registry_data:
  # pnpm monorepo node_modules volumes for Sansa dual-backend architecture
  pnpm_root_node_modules:
  pnpm_tb_nest_node_modules:
  pnpm_tb_frontend_node_modules:
  pnpm_tb_shared_node_modules:
  pnpm_s_nest_node_modules:
  pnpm_s_frontend_node_modules:
  pnpm_s_shared_node_modules:
